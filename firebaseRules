{
  "rules": {
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },

     "geofire": {
      // Allow anyone to read the GeoFire index
      ".read": true,

      // Index each location's geohash for faster querying
      ".indexOn": ["g"],

      // Schema validation
      "$key": {
        // Allow any authentication user to add, update, or remove keys in the GeoFire index
        ".write": "auth !== null",

        // Key validation
        ".validate": "newData.hasChildren(['g', 'l']) && newData.getPriority().length <= 22 && newData.getPriority().length > 0",

        // Geohash validation
        "g": {
          ".validate": "newData.val() == newData.parent().getPriority()"
        },

        // Location coordinates validation
        "l": {
          "0" : {
            ".validate": "newData.isNumber() && newData.val() >= -90 && newData.val() <= 90"
          },
          "1" : {
            ".validate": "newData.isNumber() && newData.val() >= -180 && newData.val() <= 180"
          },
          "$other": {
            ".validate": false
          }
        },

        // Don't allow any other keys to be written
        "$other": {
          ".validate": false
        }
      }
    },

    "tasks": {
      ".read": "auth !== null",
    	".write": "auth !== null",

      "$taskid": {
        ".read": "auth !== null",
        ".write": "newData.child('ownerId').val() === auth.uid",

      	"description": {
          ".validate": "newData.val() !== null && newData.isString()"
        },

        "title": {
          ".validate": "newData.val() !== null && newData.isString()"
        },

        "ownerId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },

        "isTaskItNow": {
          ".validate": "newData.val() !== null && newData.isBoolean()"
        },

        "expirationTime": {
          ".validate": "newData.val() !== null && newData.isNumber()"
        },

        "maxPrice": {
          ".validate": "newData.val() !== null && newData.isNumber() && newData.val() > 0"
        },

        "status": {
          ".validate": "newData.val() != null && newData.isString()"
        },

        "bidIds": {
          ".read": "auth !== null",
          ".write": "auth !== null"
        },

        "$other": { ".validate": false }
      }
    }
  }
}
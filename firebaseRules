{
  "rules": {
    "users": {
      "$uid": {
        // only the user themself can read/write their own data
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },

     "geofire": {
      // Allow anyone to read the GeoFire index
      ".read": true,

      // Index each location's geohash for faster querying
      ".indexOn": ["g"],

      // Schema validation
      "$key": {
        // Allow any authentication user to add, update, or remove keys in the GeoFire index
        ".write": "auth !== null",

        // Key validation
        ".validate": "newData.hasChildren(['g', 'l']) && newData.getPriority().length <= 22 && newData.getPriority().length > 0",

        // Geohash validation
        "g": {
          ".validate": "newData.val() == newData.parent().getPriority()"
        },

        // Location coordinates validation
        "l": {
          "0" : {
            ".validate": "newData.isNumber() && newData.val() >= -90 && newData.val() <= 90"
          },
          "1" : {
            ".validate": "newData.isNumber() && newData.val() >= -180 && newData.val() <= 180"
          },
          "$other": {
            ".validate": false
          }
        },

        // Don't allow any other keys to be written
        "$other": {
          ".validate": false
        }
      }
    },

    "tasks": {
      // You must be logged-in to read/write tasks
      // Anyone signed in can write new tasks.
      ".read": "auth !== null",

      ".indexOn": ["ownerId", "status"],

      "$taskid": {
        // Anyone can read a task.  Only the owner can write it.
        ".read": "auth !== null",

        // A task's description must not be null and must be a string
      	"description": {
          ".validate": "newData.val() !== null && newData.isString()",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // A task's title must not be null and must be a string
        "title": {
          ".validate": "newData.val() !== null && newData.isString()",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // A task's ownerId must not be null and must be a string
        "ownerId": {
          ".validate": "newData.val() !== null && newData.isString()",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // An isTaskItNow field must not be null and must be a boolean
        "isTaskItNow": {
          ".validate": "newData.val() !== null && newData.isBoolean()",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // The expiration time must not be null and must be a number
        "expirationTime": {
          ".validate": "newData.val() !== null && newData.isNumber()",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // The max price must not be null, must be a number, and must be greater than 0
        "maxPrice": {
          ".validate": "newData.val() !== null && newData.isNumber() && newData.val() > 0",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // A tasks' status must not be null, and it must be a string
        "status": {
          ".validate": "newData.val() != null && newData.isString()",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // The isLocalTask field must not be null and must be a boolean
        "isLocalTask": {
          ".validate": "newData.val() != null && newData.isBoolean()",
          ".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // The tags field can be anything for now
        "tags": {
        	".write": "newData.parent().child('ownerId').val() === auth.uid"
        },

        // any user can update report count
        "reportCount":{
          ".write": "auth !== null"
        },

        // No other fields are allowed on a task
        "$other": { ".validate": false }
      }
    },

    "bids":{
      // You must be logged-in to read/write bids
      // Anyone signed in can write new bids.
      ".read": "auth !== null",

      ".indexOn": ["bidderId", "taskId"],

      "$bidid":{
        //Only the original bidder can modify their bid
        ".write": "newData.child('bidderId').val() === auth.uid",

        //bidderId must be a non null string
        "bidderId":{
            ".validate": "newData.val() !== null && newData.isString()"
        },

        //taskId must be a non null string
        "taskId": {
            ".validate": "newData.val() !== null && newData.isString()"
        },

        //bid value must be a number greater than 0
        "bidValue": {
          	".validate": "newData.val() !== null && newData.isNumber() && newData.val() > 0"
        },

        // No other fields are allowed on a bid
        "$other": { ".validate": false }
      }
    },

    "reports":{
      // You must be logged-in to read/write reports
      // Anyone signed in can write new reports.
      ".read": "auth !== null",

        ".indexOn": ["reporterId", "taskId"],

          "$reportId": {
            // only the original reporter can write to this report
            ".write": "newData.child('reporterId').val() === auth.uid",

            // reporterId must be a non-null string
            "reporterId":{
              ".validate": "newData.val() !== null && newData.isString()"
            },

            // taskId must be a non-null string
            "taskId": {
              ".validate": "newData.val() !== null && newData.isString()"
            },

            // description must be a non-null string
            "description": {
              ".validate": "newData.val() !== null && newData.isString()"
            },

            // No other fields are allowed on a report
        		"$other": { ".validate": false }

          }

    }

    }
  }

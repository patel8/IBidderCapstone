{
  "rules": {
    "users": {
      "$uid": {
        // only the user themself can read/write their own data
        ".read": "auth !== null",
        ".write": "$uid === auth.uid"
      }
    },
    "geofire": {
      // Allow anyone to read the GeoFire index
      ".read": true,
      // Index each location's geohash for faster querying
      ".indexOn": [
        "g"
      ],
      // Schema validation
      "$key": {
        // Allow any authentication user to add, update, or remove keys in the GeoFire index
        ".write": "auth !== null",
        // Key validation
        ".validate": "newData.hasChildren(['g', 'l']) && newData.getPriority().length <= 22 && newData.getPriority().length > 0",
        // Geohash validation
        "g": {
          ".validate": "newData.val() == newData.parent().getPriority()"
        },
        // Location coordinates validation
        "l": {
          "0": {
            ".validate": "newData.isNumber() && newData.val() >= -90 && newData.val() <= 90"
          },
          "1": {
            ".validate": "newData.isNumber() && newData.val() >= -180 && newData.val() <= 180"
          },
          "$other": {
            ".validate": false
          }
        },
        // Don't allow any other keys to be written
        "$other": {
          ".validate": false
        }
      }
    },
    "tasks": {
      "ready": {
        // You must be logged-in to read/write tasks
        // Anyone signed in can write new tasks.
        ".read": "auth !== null",
        ".indexOn": [
          "ownerId",
          "status",
          "expirationTime",
          "wasDeleted",
          "isLocalTask"
        ],
        "$taskid": {
          // Anyone can read a task.  Only the owner can write it.
          ".write": "auth.uid === newData.child('ownerId').val() || auth.uid === data.child('ownerId').val()",
          // A task's description must not be null and must be a string
          "description": {
            ".validate": "newData.val() !== null && newData.isString()"
          },
          // A task's title must not be null and must be a string
          "title": {
            ".validate": "newData.val() !== null && newData.isString()"
          },
          // A task's ownerId must not be null and must be a string
          "ownerId": {
            ".validate": "newData.val() !== null && newData.isString()"
          },
          // An isTaskItNow field must not be null and must be a boolean
          "isTaskItNow": {
            ".validate": "newData.val() !== null && newData.isBoolean()"
          },
          // The expiration time must not be null and must be a number
          "expirationTime": {
            ".validate": "newData.val() !== null && newData.isNumber()"
          },
          // The max price must not be null, must be a number, and must be greater than 0
          "maxPrice": {
            ".validate": "newData.val() !== null && newData.isNumber() && newData.val() > 0"
          },
          // A tasks' status must not be null, and it must be a string
          "status": {
            ".validate": "newData.val() !== null && newData.isString()"
          },
          // The isLocalTask field must not be null and must be a boolean
          "isLocalTask": {
            ".validate": "newData.val() !== null && newData.isBoolean()"
          },
          // The taskId field must be a string
          "taskId": {
            ".validate": "newData.val() !== null && newData.isString()"
          },
          // The tags field can be anything for now
          "tags": {
          },
          // reportCount must be a number
          "reportCount": {
            ".validate": "newData.val() !== null && newData.isNumber()"
          },
          // wasDeleted must be a boolean
          "wasDeleted": {
            ".validate": "newData.val() !== null && newData.isBoolean()"
          },
          // No other fields are allowed on a task
          "$other": {
            ".validate": false
          }
        }
      },
      "timed_out": {
        //tasks in this state can be read but not written to (it's too late in the process

        ".indexOn": [
          "ownerId",
          "status",
          "expirationTime"
        ],
        ".read": "auth !== null",
        ".write": false
      },
      "accepted": {
        //tasks in this state can be read but not written to (it's too late in the process)
        ".indexOn": [
          "ownerId",
          "status",
          "expirationTime"
        ],
        ".read": "auth !== null",
        ".write": false
      },
      "finished": {
        //tasks in this state can be read but not written to (it's too late in the process)
        ".indexOn": [
          "ownerId",
          "status",
          "expirationTime"
        ],
        ".read": "auth !== null",
        ".write": false
      },
      "reported": {
        //nobody can read/write reported tasks
        ".indexOn": [
          "ownerId",
          "status",
          "expirationTime"
        ],
        ".read": false,
        ".write": false,
      }
    },
    "bids": {
      // You must be logged-in to read/write bids
      // Anyone signed in can write new bids.
      ".read": "auth !== null",
      ".indexOn": [
        "bidderId",
        "taskId"
      ],
      "$bidid": {
        //Only the original bidder can modify their bid
        ".write": "newData.child('bidderId').val() === auth.uid || auth.uid === data.child('bidderId').val()",
        //bidderId must be a non null string
        "bidderId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        //taskId must be a non null string
        "taskId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        //bid value must be a number greater than 0
        "bidValue": {
          ".validate": "newData.val() !== null && newData.isNumber() && newData.val() > 0"
        },
        // The bidId field must be a string
        "bidId": {
          ".validate": "newData.isString()"
        },
        // No other fields are allowed on a bid
        "$other": {
          ".validate": false
        }
      }
    },
    "reports": {
      // You must be logged-in to read/write reports
      // Anyone signed in can write new reports.
      ".read": "auth !== null",
      ".indexOn": [
        "reporterId",
        "taskId",
        "wasRead"
      ],
      "$reportId": {
        // only the original reporter can write to this report
        ".write": "newData.child('reporterId').val() === auth.uid",
        // reporterId must be a non-null string
        "reporterId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        // taskId must be a non-null string
        "taskId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        // description must be a non-null string
        "description": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        // The reportId field must be a string
        "reportId": {
          ".validate": "newData.isString()"
        },
        "wasRead": {
          ".validate": "newData.isBoolean()"
        },
        // No other fields are allowed on a report
        "$other": {
          ".validate": false
        }
      }
    },
    "taskWinners": {
      ".indexOn": [
        "winnerId",
        "wasNotified",
        "taskId"
      ],
      "$taskwinnerid": {
        ".read": "auth !== null",
        ".write": "auth.uid === newData.child('taskOwnerId').val()",
        "taskOwnerId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "wasNotified": {
          ".validate": "newData.val() !== null && newData.isBoolean()"
        },
        "winnerId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "taskId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        // No other fields are allowed on a taskWinner
        "$other": {
          ".validate": false
        }
      }
    },
    "reviews": {
      ".indexOn": [
        "wasRead",
        "reviewWriterId",
        "userReviewedId"
      ],
      "$reviewid": {
        "reviewId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "reviewWriterId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "userReviewedId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "reviewScore": {
          ".validate": "newData.val() !== null && newData.isNumber()"
        },
        "reviewText": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "wasRead": {
          ".validate": "newData.val() !== null && newData.isBoolean()"
        },
        // No other fields are allowed on a review
        "$other": {
          ".validate": false
        }
      }
    },
    "aggregatedReviews": {
      "$aggregatedreviewid": {
        "reviewScore": {
          ".validate": "newData.val() !== null && newData.isNumber()"
        },
        "userId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "totalReviews": {
          ".validate": "newData.val() !== null && newData.isNumber()"
        },
        // No other fields are allowed on a aggregated review
        "$other": {
          ".validate": false
        }
      }
    },
    "tasksCompleted": {
      ".indexOn": [
        "wasRead"
      ],
      "$taskscompletedid": {
        "taskId": {
          ".validate": "newData.val() !== null && newData.isString()"
        },
        "wasRead": {
          ".validate": "newData.val() !== null && newData.isBoolean()"
        },
        // No other fields are allowed on a tasksCompleted
        "$other": {
          ".validate": false
        }
      }
    }
  }
}
